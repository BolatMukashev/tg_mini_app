from fastapi import FastAPI, Request, Form
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from ydb_connect import save_to_cache, get_id_by_ref
from mangum import Mangum

app = FastAPI()

# –î–ª—è Cloud Functions —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–Ω–∞—á–µ
# –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤ Object Storage
try:
    app.mount("/static", StaticFiles(directory="static"), name="static")
    templates = Jinja2Templates(directory="templates")
except:
    # –ï—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ—Ç (–≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ Cloud Functions)
    templates = None


@app.get("/", response_class=HTMLResponse)
async def mini_app(request: Request):
    """
    Telegram Mini App –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç URL.
    Telegram –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞—ë—Ç initData —á–µ—Ä–µ–∑ Telegram.WebApp.initData.
    start_param –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –∏–∑ Telegram.WebApp.initDataUnsafe.start_param
    """
    if templates:
        return templates.TemplateResponse("index.html", {"request": request})
    return HTMLResponse("<h1>App is running</h1>")

@app.post("/save_ref")
async def save_ref(request: Request):
    data = await request.json()
    tg_id = data.get("tg_id")
    ref = data.get("ref")
    ref_id = await get_id_by_ref(ref)
    if ref_id:
        await save_to_cache(tg_id, "referal", int(ref_id))
    print(f"üì• –ù–æ–≤—ã–π –ø–µ—Ä–µ—Ö–æ–¥: user_id={tg_id}, ref={ref}")
    return {"status": "ok"}

@app.get("/favicon.ico")
async def favicon():
    return RedirectResponse(url="/static/favicon.ico")

# –°–æ–∑–¥–∞—ë–º handler –¥–ª—è Yandex Cloud Functions
handler = Mangum(app, lifespan="off")

# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)

